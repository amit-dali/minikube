- hosts:
  - local
  vars:
        nginx_temp_dir: "/tmp/ansible/minikube/nginx/"
        nginx_home_file: "index.html"
        nginx_app_source_url: "https://raw.githubusercontent.com/amit-dali/minikube/master/nginx/{{ nginx_home_file }}"
        nginx_content_volume: "/usr/share/nginx/html"
        nginx_port_mapping: "8080:80"
        nginx_port: "8080"
        nginx_container_name: "nginx-deployment"
        nginx_image: "nginx"
        nginx_url: "http://localhost:8080/"
        tomcat_sample_webapp: "sample.war"
        tomcat_sample_webapp_location: "https://tomcat.apache.org/tomcat-8.0-doc/appdev/sample/{{ tomcat_sample_webapp }}"
        tomcat_local_webapps: "~/amdali/assignment1/webapps"
        tomcat_port_mapping: "8090:8080"
        tomcat_port: "8090"
        tomcat_image: "tomcat"
        tomcat_image_version: "8.0"
        tomcat_container_name: "sample-webapp"
        tomcat_url: "http://localhost:8090/sample/"
        tomcat_container_volume: "/usr/local/tomcat/webapps/"
        deployment_dir: "/tmp/deployment/"
        service_dir: "/tmp/service/"
        k8s_namespace: "demo1"
  tasks:
        - name: Create dirs to hold application on nginx and tomcat
          file:
                path: "{{ item }}"
                state: directory
                force: yes
                mode: 0755
          loop:
                - "{{ nginx_temp_dir }}"
                - "{{ tomcat_local_webapps }}"
                - "{{ deployment_dir }}"
                - "{{ service_dir }}"
        - name: Download {{ nginx_home_file }} and {{ tomcat_sample_webapp_location }}
          get_url:
                url: "{{ item.url }}"
                dest: "{{ item.dest }}"
                force: yes
                mode: 0755
          loop:
                - { url: "{{ nginx_app_source_url }}", dest: "{{ nginx_temp_dir }}/{{ nginx_home_file }}" }
                - { url: "{{ tomcat_sample_webapp_location }}", dest: "{{ tomcat_local_webapps }}"}
                - { url: "https://raw.githubusercontent.com/amit-dali/minikube/master/deployment/tomcat.yaml", dest: "{{ deployment_dir }}tomcat.yaml"}
                - { url: "https://raw.githubusercontent.com/amit-dali/minikube/master/deployment/nginx.yaml", dest: "{{ deployment_dir }}nginx.yaml"}
                - { url: "https://raw.githubusercontent.com/amit-dali/minikube/master/service/tomcat.yaml", dest: "{{ service_dir }}tomcat.yaml"}
                - { url: "https://raw.githubusercontent.com/amit-dali/minikube/master/service/nginx.yaml", dest: "{{ service_dir }}nginx.yaml"}
        - name: Create nginx container with custom {{ nginx_home_file }}
          docker_container:
                name: "{{ nginx_container_name }}"
                image: "{{ nginx_image }}"
                command: nginx -g 'daemon off;'
                debug: yes
                detach: yes
                state: started
                restart: yes
                published_ports:
                    - "{{ nginx_port_mapping }}"
                volumes:
                    - "{{ nginx_temp_dir }}:{{ nginx_content_volume }}:ro"  
        - name: Create tomcat container with deployed {{ tomcat_sample_webapp }}
          docker_container:
                name: "{{ tomcat_container_name }}"
                image: "{{ tomcat_image }}:{{ tomcat_image_version }}"
                debug: yes
                detach: yes
                state: started
                restart: yes
                published_ports:
                    - "{{ tomcat_port_mapping }}"
                volumes:
                    - "{{ tomcat_local_webapps }}:{{ tomcat_container_volume }}:rw"
        - name: Check that can connect to a nginx and it returns a status 200
          uri:
                url: "{{ item.url }}"
          register: "{{ item.register }}"
          loop:
            - { url: "{{ nginx_url }}", register: "nginx_home_page" }
        - debug:
            msg: "Respone from nginx {{ nginx_home_page }}"
        - name: create a docker image from the container
          command: 
            - "docker commit {{ nginx_container_name }} amdali/{{ nginx_container_name }}"
            - "docker commit {{ tomcat_container_name }} amdali/{{ tomcat_container_name }}"
        - name: Stop docker containers
          docker_container:
            name: mycontainer
            state: stopped
        - loop:
            - "{{ nginx_container_name }}"
            - "{{ tomcat_container_name }}"
        - name: Remove docker containers
          docker_container:
            name: mycontainer
            state: absent
        - loop:
            - "{{ nginx_container_name }}"
            - "{{ tomcat_container_name }}"
        - name: Create a k8s namespace {{ k8s_namespace }}
          k8s:
            name: "{{ k8s_namespace }}"
            api_version: v1
            kind: Namespace
            state: present
        - name: Create a Deployment by reading the definition from a local file
          k8s:
            state: present
            src: "{{ item }}"
          loop:
            - "{{ deployment_dir }}tomcat.yaml"
            - "{{ deployment_dir }}nginx.yaml"
            - "{{ service_dir }}nginx.yaml"
            - "{{ service_dir }}tomcat.yaml"
        - name: Create a Service nginx from an inline definition
          k8s:
            state: present
            definition:
              apiVersion: v1
              kind: Service
              metadata:
                name: "{{ nginx_container_name }}"
                labels:
                    app: "{{ nginx_container_name }}" 
                namespace: "{{ k8s_namespace }}"
              spec:
                selector:
                    name: nginx
                type: NodePort
                ports:
                - protocol: TCP
                  targetPort: "{{ nginx_port }}"
                  name: "port-{{ nginx_port }}-tcp"
                  port: "{{ nginx_port }}"
                  nodePort: 32751
        - name: Create a Service tomcat from an inline definition
          k8s:
            state: present
            definition:
              apiVersion: v1
              kind: Service
              metadata:
                name: "{{ tomcat_container_name }}"
                labels:
                    app: "{{ tomcat_container_name }}"
                namespace: "{{ k8s_namespace }}"
              spec:
                selector:
                    name: tomcat
                type: NodePort
                ports:
                - protocol: TCP
                  targetPort: "{{ tomcat_port }}"
                  name: "port-{{ nginx_port }}-tcp"
                  port: "{{ tomcat_port }}"
                  nodePort: 32752       
